openapi: 3.0.3
info:
  title: Computer games store - OpenAPI 3.0
  description: |-
    This is a sample Computer game store Server based on the OpenAPI 3.0 specification.  
    
    Some useful links:
    - [OpenAPI docs](https://swagger.io/specification/)
    - [Redoc GitHub repository](https://github.com/Redocly/redoc)
  version: 1.0.0
servers:
  - url: https://localhost/api/v3
tags:
  - name: game
    description: Operations about computer games
  - name: company
    description: Everything about game companies
paths:
  /game:
    post:
      tags:
        - game
      summary: Add a new game to game store
      description: Add a new game to game store
      operationId: addGame
      requestBody:
        description: Create a new game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '405':
          description: Invalid input
    put:
      tags:
        - game
      summary: Update an existing game
      description: Update an existing game by Id
      operationId: updateGame
      requestBody:
        description: Update an existent game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Validation exception
  /game/findByTags:
    get:
      tags:
        - game
      summary: Finds games by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findGamesByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid tag value
  /game/findByName:
    get:
      tags:
        - game
      summary: Finds games by name
      description: Only one name can be provided
      operationId: findGamesByName
      parameters:
        - name: name
          in: query
          description: Name value that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid status value
  /game/{gameId}:
    get:
      tags:
        - game
      summary: Find game by ID
      description: Returns a single game
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
    delete:
      tags:
        - game
      summary: Deletes a game
      description: delete a game
      operationId: deleteGame
      parameters:
        - name: gameId
          in: path
          description: Game id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid game value
  /company:
    put:
      tags:
        - company
      summary: Update an existing company
      description: Update an existing company by Id
      operationId: updateCompany
      requestBody:
        description: Update an existent company in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid ID supplied
        '404':
          description: Company not found
        '405':
          description: Validation exception
    post:
      tags:
        - company
      summary: Add a new company to the catalogue
      description: Add a new company to the catalogue
      operationId: addCompany
      requestBody:
        description: Create a new company in the catalogue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '405':
          description: Invalid input
  /company/findByName:
    get:
      tags:
        - company
      summary: Finds companies by name
      description: Only one name can be provided
      operationId: findCompaniesByName
      parameters:
        - name: name
          in: query
          description: Name value that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '400':
          description: Invalid status value
  /company/{companyId}:
    get:
      tags:
        - company
      summary: Find company by ID
      description: Returns a single game
      operationId: getCompanyById
      parameters:
        - name: companyId
          in: path
          description: ID of company to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid ID supplied
        '404':
          description: Company not found
    delete:
      tags:
        - company
      summary: Deletes a company
      description: delete a company
      operationId: deleteCompany
      parameters:
        - name: companyId
          in: path
          description: Company id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid company value
components:
  schemas:
    Game:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        companyId:
          type: integer
          format: int64
          example: 1123
        platforms:
          type: array
          items:
            type: string
            enum:
              - PC
              - PlayStation
              - Xbox
        releaseDate:
          type: string
          format: date
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3322
        name:
          type: string
          example: 'Ubisoft'
        games:
          type: array
          items:
            type: integer
            format: int64
            example: 111
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2233
        name:
          type: string
          example: 'RPG'